using System.Text;

namespace Main.Codewars
{
	public class MorseCodeDecoder3
	{
		private const string DOT = "D";
		private const string DASH = "H";
		private const string CHAR_SPACE = "S";
		private const string SYMBOL_SPACE = "C";
		private const string WORD_SPACE = "W";

		private const string DOT_SYMBOL = "1";
		private const string DASH_SYMBOL = "111";
		private const string CHAR_DIVIDE = "0";
		private const string SYMBOL_DIVIDE = "000";
		private const string WORDS_DIVIDE = "0000000";
		
		private const string SPACE = " ";
		private const string SPACE_LONG = "   ";

		public static string decodeBitsAdvanced(string bits)
		{
			bits = bits.Trim('0');
			if (string.IsNullOrEmpty(bits) || bits.All('0'.Equals))
				return string.Empty;

			var all_0_units = GetUnits(bits.Split('1', StringSplitOptions.RemoveEmptyEntries));
			var all_1_units = GetUnits(bits.Split('0', StringSplitOptions.RemoveEmptyEntries));

			var symbols = new Dictionary<string, string>();

			for (int i = 0; i < all_1_units.Count; i++)
			{
				var s = all_1_units[i];
				if (symbols.ContainsValue(DOT) == false || i < all_1_units.Count / 2)
				{
					if (symbols.ContainsValue(DOT) == false)
					{
						if (all_0_units.Count > 0 && s.Length > all_0_units[0].Length)
						{
							var ss = all_0_units[0];
							symbols.Add(ss.Replace("0", "1"), DOT);
							symbols.Add(ss, CHAR_SPACE);
						}
						else
						{
							symbols.Add(s, DOT);
							symbols.Add(s.Replace("1", "0"), CHAR_SPACE);
						}
					}
					else
					{
						symbols.Add(s, DOT);
						symbols.Add(s.Replace("1", "0"), CHAR_SPACE);
					}
				}
				else
				{
					symbols.Add(s, DASH);
					symbols.Add(s.Replace("1", "0"), SYMBOL_SPACE);
				}
			}

			if (symbols.ContainsValue(SYMBOL_SPACE))
			{
				var spaces = symbols.Where(x => x.Value == SYMBOL_SPACE).OrderBy(s => s.Key.Length).Reverse().ToList();
				for (var i = 1; i <= 2; i++)
				{
					var tmp = new string('0', spaces[0].Key.Length + i);
					if (symbols.ContainsKey(tmp) == false)
					{
						symbols.Add(tmp, SYMBOL_SPACE);
					}
				}
			}

			if (symbols.ContainsValue(DASH) == false)
			{
				var dotKey = symbols.FirstOrDefault(x => x.Value == DOT).Key;
				if (dotKey != null)
				{
					var str = string.Empty;
					for (int i = 2; i < 5; i++)
					{
						str = new string('1', i);
						if(symbols.ContainsKey(str) == false)
							symbols.Add(str, DASH);

						str = new string('0', i);
						if (symbols.ContainsKey(str) == false)
							symbols.Add(str, SYMBOL_SPACE);
					}
				}
			}

			foreach (var unit in all_0_units)
			{
				if (symbols.ContainsKey(unit) == false)
					symbols.Add(unit, symbols.ContainsValue(SYMBOL_SPACE)
						? WORD_SPACE
						: SYMBOL_SPACE);
			}

			foreach (var s in symbols.Keys.OrderBy(x => x.Length).Reverse().ToList())
			{
				bits = bits.Replace(s, symbols[s]);
			}

			bits = bits.Replace(DOT, DOT_SYMBOL);
			bits = bits.Replace(DASH, DASH_SYMBOL);
			bits = bits.Replace(CHAR_SPACE, CHAR_DIVIDE);
			bits = bits.Replace(SYMBOL_SPACE, SYMBOL_DIVIDE);
			bits = bits.Replace(WORD_SPACE, WORDS_DIVIDE);

			return bits;
		}

		private static List<string> GetUnits(string[] units)
		{
			var dict = new Dictionary<string, int>();
			foreach (var s in units)
			{
				if (dict.ContainsKey(s))
				{
					dict[s]++;
				}
				else
				{
					dict.Add(s, 1);
				}
			}
			return dict.Keys.OrderBy(x => x.Length).ToList();
		}

		public static string DecodeBits(string bits)
		{
			bits = bits.Trim('0');
			if (string.IsNullOrEmpty(bits) || bits.All('0'.Equals))
				return string.Empty;

			if (bits.All('1'.Equals))
				return ".";

			var result = new StringBuilder();

			foreach (var word in bits.Split(WORDS_DIVIDE))
			{
				foreach (var s in word.Split(SYMBOL_DIVIDE))
				{
					foreach (var c in s.Split(CHAR_DIVIDE))
					{
						result.Append(c.Equals(DOT_SYMBOL) ? "." : "-");
					}
					result.Append(SPACE);
				}
				result.Append(SPACE_LONG);
			}

			return result.ToString().Trim(' ');
		}

		public static string decodeMorse(string morseCode)
		{
			if (string.IsNullOrEmpty(morseCode))
				return string.Empty;

			var result = new StringBuilder();

			foreach (var word in morseCode.Split(SPACE_LONG, StringSplitOptions.RemoveEmptyEntries))
			{
				foreach (var symbol in word.Split(SPACE, StringSplitOptions.RemoveEmptyEntries))
				{
					result.Append(MorseCode.Get(symbol));
				}
				result.Append(SPACE);
			}

			return result.ToString().Trim(' ');
		}

		public static void TestAll()
		{
			string code = string.Empty;
			string expected = string.Empty;

			code = "110110100111000001100000011111101001111100111111000000000001110111111110111110111110000001011000111111000001111100111011000001";
			expected = "HEY JUDE";
			Test(code, expected);

			code = "0";
			expected = "";
			Test(code, expected);

			code = "1100110011001100000011000000111111001100111111001111110000000000000011001111110011111100111111000000110011001111110000001111110011001100000011";
			expected = "HEY JUDE";
			Test(code, expected);

			code = "111110000011111";
			expected = "I";
			Test(code, expected);

			code = "11111100111111";
			expected = "M";
			Test(code, expected);

			code
			//code = "11111100000011110100001001100000000001110000000000000001101111101111000100000100001111111110000000001111110011111100011101100000111111000011011111000111111000000000000000001111110000100110000011111101111111011111111100000001111110001111100001";
			expected = "THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG";
			Test(code, expected);

			code = "00000000000000011111111000000011111111111100000000000111111111000001111111110100000000111111111111011000011111111011111111111000000000000000000011111111110000110001111111111111000111000000000001111111111110000111111111100001100111111111110000000000111111111111011100001110000000000000000001111111111010111111110110000000000000001111111111100001111111111110000100001111111111111100000000000111111111000000011000000111000000000000000000000000000011110001111100000111100000000111111111100111111111100111111111111100000000011110011111011111110000000000000000000000111111111110000000011111000000011111000000001111111111110000000001111100011111111000000000111111111110000011000000000111110000000111000000000011111111111111000111001111111111001111110000000000000000000001111000111111111100001111111111111100100000000001111111100111111110111111110000000011101111111000111000000001001111111000000001111111111000000000111100001111111000000000000011111111100111111110111111111100000000000111111110000001100000000000000000000111111101010000010000001111111100000000011111000111111111000000111111111110011111111001111111110000000011000111111110000111011111111111100001111100001111111100000000000011110011101110001000111111110000000001111000011111110010110001111111111000000000000000000111111111110000000100000000000000000011110111110000001000011101110000000000011111111100000011111111111100111111111111000111111111000001111111100000000000001110111111111111000000110011111111111101110001111111111100000000111100000111100000111111111100000111111111111000000011111111000000000001000000111100000001000001111100111111111110000000000000000000010001111111100000011111111100000000000000100001111111111110111001111111111100000111111100001111111111000000000000000000000000011100000111111111111011110000000010000000011111111100011111111111100001110000111111111111100000000000000111110000011111001111111100000000000011100011100000000000011111000001111111111101000000001110000000000000000000000000000111110010000000000111111111000011111111110000000000111111111111101111111111100000000010000000000000011111111100100001100000000000000111100111100000000001100000001111111111110000000011111111111000000000111100000000000000000000111101111111111111000000000001111000011111000011110000000001100111111100111000000000100111000000000000111110000010000011111000000000000001111111111100000000110111111111100000000000000111111111111100000111000000000111111110001111000000111111110111111000000001111000000000010000111111111000011110001111111110111110000111111111111000000000000000000000000111111111110000000111011111111100011111110000000001111111110000011111111100111111110000000001111111111100111111111110000000000110000000000000000001000011111111110000000001111111110000000000000000000000011111111111111000000111111111000001111111110000000000111111110000010000000011111111000011111001111111100000001110000000011110000000001011111111000011111011111111110011011111111111000000000000000000100011111111111101111111100000000000000001100000000000000000011110010111110000000011111111100000000001111100011111111111101100000000111110000011110000111111111111000000001111111111100001110111111111110111000000000011111111101111100011111111110000000000000000000000000010000111111111100000000001111111110111110000000000000000000000110000011110000000000001111111111100110001111111100000011100000000000111110000000011111111110000011111000001111000110000000011100000000000000111100001111111111100000111000000001111111111000000111111111100110000000001111000001111111100011100001111111110000010011111111110000000000000000000111100000011111000001111000000000111111001110000000011111111000100000000000011111111000011001111111100000000000110111000000000000111111111111000100000000111111111110000001111111111011100000000000000000000000000";
			expected = "MGY CQD CQD SOS TITANIC POSITION 41,44 N 50,24 W, REQUIRE IMMEDIATE ASSISTANCE, COME AT ONCE, WE STRUCK AN ICEBERG, SINKING";
			Test(code, expected);

			code = "1001";
			expected = "EE";
			Test(code, expected);

			code = "10000001";
			expected = "E E";
			Test(code, expected);

			code = "100001";
			expected = "EE";
			Test(code, expected);
		}

		public static void Test(string code, string expected)
		{
			var res = decodeBitsAdvanced(code);
			var res2 = DecodeBits(res);
			var res3 = decodeMorse(res2);

			if (res3 == expected)
			{
				Console.WriteLine($"OK");
			}
			else
			{
				Console.WriteLine($"Error - {res3}");
			}
				
			
		}
	}
}